// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"admin-api/internal/dao/model"
)

func newAccessLog(db *gorm.DB, opts ...gen.DOOption) accessLog {
	_accessLog := accessLog{}

	_accessLog.accessLogDo.UseDB(db, opts...)
	_accessLog.accessLogDo.UseModel(&model.AccessLog{})

	tableName := _accessLog.accessLogDo.TableName()
	_accessLog.ALL = field.NewAsterisk(tableName)
	_accessLog.ID = field.NewInt32(tableName, "id")
	_accessLog.AccessID = field.NewString(tableName, "access_id")
	_accessLog.UID = field.NewInt32(tableName, "uid")
	_accessLog.Method = field.NewString(tableName, "method")
	_accessLog.Path = field.NewString(tableName, "path")
	_accessLog.Header = field.NewString(tableName, "header")
	_accessLog.Query = field.NewString(tableName, "query")
	_accessLog.Body = field.NewString(tableName, "body")
	_accessLog.IP = field.NewString(tableName, "ip")
	_accessLog.Response = field.NewString(tableName, "response")
	_accessLog.CreatedTime = field.NewTime(tableName, "created_time")
	_accessLog.UpdatedTime = field.NewTime(tableName, "updated_time")

	_accessLog.fillFieldMap()

	return _accessLog
}

type accessLog struct {
	accessLogDo

	ALL         field.Asterisk
	ID          field.Int32 // id
	AccessID    field.String
	UID         field.Int32  // user.id
	Method      field.String // request method
	Path        field.String // path
	Header      field.String // http headers
	Query       field.String // http query
	Body        field.String // http body
	IP          field.String // client ip
	Response    field.String
	CreatedTime field.Time
	UpdatedTime field.Time

	fieldMap map[string]field.Expr
}

func (a accessLog) Table(newTableName string) *accessLog {
	a.accessLogDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a accessLog) As(alias string) *accessLog {
	a.accessLogDo.DO = *(a.accessLogDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *accessLog) updateTableName(table string) *accessLog {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt32(table, "id")
	a.AccessID = field.NewString(table, "access_id")
	a.UID = field.NewInt32(table, "uid")
	a.Method = field.NewString(table, "method")
	a.Path = field.NewString(table, "path")
	a.Header = field.NewString(table, "header")
	a.Query = field.NewString(table, "query")
	a.Body = field.NewString(table, "body")
	a.IP = field.NewString(table, "ip")
	a.Response = field.NewString(table, "response")
	a.CreatedTime = field.NewTime(table, "created_time")
	a.UpdatedTime = field.NewTime(table, "updated_time")

	a.fillFieldMap()

	return a
}

func (a *accessLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *accessLog) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 12)
	a.fieldMap["id"] = a.ID
	a.fieldMap["access_id"] = a.AccessID
	a.fieldMap["uid"] = a.UID
	a.fieldMap["method"] = a.Method
	a.fieldMap["path"] = a.Path
	a.fieldMap["header"] = a.Header
	a.fieldMap["query"] = a.Query
	a.fieldMap["body"] = a.Body
	a.fieldMap["ip"] = a.IP
	a.fieldMap["response"] = a.Response
	a.fieldMap["created_time"] = a.CreatedTime
	a.fieldMap["updated_time"] = a.UpdatedTime
}

func (a accessLog) clone(db *gorm.DB) accessLog {
	a.accessLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a accessLog) replaceDB(db *gorm.DB) accessLog {
	a.accessLogDo.ReplaceDB(db)
	return a
}

type accessLogDo struct{ gen.DO }

type IAccessLogDo interface {
	gen.SubQuery
	Debug() IAccessLogDo
	WithContext(ctx context.Context) IAccessLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAccessLogDo
	WriteDB() IAccessLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAccessLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAccessLogDo
	Not(conds ...gen.Condition) IAccessLogDo
	Or(conds ...gen.Condition) IAccessLogDo
	Select(conds ...field.Expr) IAccessLogDo
	Where(conds ...gen.Condition) IAccessLogDo
	Order(conds ...field.Expr) IAccessLogDo
	Distinct(cols ...field.Expr) IAccessLogDo
	Omit(cols ...field.Expr) IAccessLogDo
	Join(table schema.Tabler, on ...field.Expr) IAccessLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAccessLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAccessLogDo
	Group(cols ...field.Expr) IAccessLogDo
	Having(conds ...gen.Condition) IAccessLogDo
	Limit(limit int) IAccessLogDo
	Offset(offset int) IAccessLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAccessLogDo
	Unscoped() IAccessLogDo
	Create(values ...*model.AccessLog) error
	CreateInBatches(values []*model.AccessLog, batchSize int) error
	Save(values ...*model.AccessLog) error
	First() (*model.AccessLog, error)
	Take() (*model.AccessLog, error)
	Last() (*model.AccessLog, error)
	Find() ([]*model.AccessLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AccessLog, err error)
	FindInBatches(result *[]*model.AccessLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AccessLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAccessLogDo
	Assign(attrs ...field.AssignExpr) IAccessLogDo
	Joins(fields ...field.RelationField) IAccessLogDo
	Preload(fields ...field.RelationField) IAccessLogDo
	FirstOrInit() (*model.AccessLog, error)
	FirstOrCreate() (*model.AccessLog, error)
	FindByPage(offset int, limit int) (result []*model.AccessLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAccessLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a accessLogDo) Debug() IAccessLogDo {
	return a.withDO(a.DO.Debug())
}

func (a accessLogDo) WithContext(ctx context.Context) IAccessLogDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a accessLogDo) ReadDB() IAccessLogDo {
	return a.Clauses(dbresolver.Read)
}

func (a accessLogDo) WriteDB() IAccessLogDo {
	return a.Clauses(dbresolver.Write)
}

func (a accessLogDo) Session(config *gorm.Session) IAccessLogDo {
	return a.withDO(a.DO.Session(config))
}

func (a accessLogDo) Clauses(conds ...clause.Expression) IAccessLogDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a accessLogDo) Returning(value interface{}, columns ...string) IAccessLogDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a accessLogDo) Not(conds ...gen.Condition) IAccessLogDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a accessLogDo) Or(conds ...gen.Condition) IAccessLogDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a accessLogDo) Select(conds ...field.Expr) IAccessLogDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a accessLogDo) Where(conds ...gen.Condition) IAccessLogDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a accessLogDo) Order(conds ...field.Expr) IAccessLogDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a accessLogDo) Distinct(cols ...field.Expr) IAccessLogDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a accessLogDo) Omit(cols ...field.Expr) IAccessLogDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a accessLogDo) Join(table schema.Tabler, on ...field.Expr) IAccessLogDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a accessLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAccessLogDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a accessLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IAccessLogDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a accessLogDo) Group(cols ...field.Expr) IAccessLogDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a accessLogDo) Having(conds ...gen.Condition) IAccessLogDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a accessLogDo) Limit(limit int) IAccessLogDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a accessLogDo) Offset(offset int) IAccessLogDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a accessLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAccessLogDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a accessLogDo) Unscoped() IAccessLogDo {
	return a.withDO(a.DO.Unscoped())
}

func (a accessLogDo) Create(values ...*model.AccessLog) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a accessLogDo) CreateInBatches(values []*model.AccessLog, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a accessLogDo) Save(values ...*model.AccessLog) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a accessLogDo) First() (*model.AccessLog, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AccessLog), nil
	}
}

func (a accessLogDo) Take() (*model.AccessLog, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AccessLog), nil
	}
}

func (a accessLogDo) Last() (*model.AccessLog, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AccessLog), nil
	}
}

func (a accessLogDo) Find() ([]*model.AccessLog, error) {
	result, err := a.DO.Find()
	return result.([]*model.AccessLog), err
}

func (a accessLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AccessLog, err error) {
	buf := make([]*model.AccessLog, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a accessLogDo) FindInBatches(result *[]*model.AccessLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a accessLogDo) Attrs(attrs ...field.AssignExpr) IAccessLogDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a accessLogDo) Assign(attrs ...field.AssignExpr) IAccessLogDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a accessLogDo) Joins(fields ...field.RelationField) IAccessLogDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a accessLogDo) Preload(fields ...field.RelationField) IAccessLogDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a accessLogDo) FirstOrInit() (*model.AccessLog, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AccessLog), nil
	}
}

func (a accessLogDo) FirstOrCreate() (*model.AccessLog, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AccessLog), nil
	}
}

func (a accessLogDo) FindByPage(offset int, limit int) (result []*model.AccessLog, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a accessLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a accessLogDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a accessLogDo) Delete(models ...*model.AccessLog) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *accessLogDo) withDO(do gen.Dao) *accessLogDo {
	a.DO = *do.(*gen.DO)
	return a
}
